// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store.Model.Enum;
using Store.Model.Persistence;

#nullable disable

namespace Store.Model.Migrations
{
    [DbContext(typeof(Persistence.Persistence))]
    partial class PersistenceModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "signature", new[] { "archived", "created" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status", new[] { "signed", "unsigned" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Store.Model.Directory.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Signature>("State")
                        .HasColumnType("signature");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Store.Model.Directory.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Signature>("State")
                        .HasColumnType("signature");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Store.Model.Directory.UnitMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Signature>("State")
                        .HasColumnType("signature");

                    b.HasKey("Id");

                    b.ToTable("UnitMeasures");
                });

            modelBuilder.Entity("Store.Model.Store.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MeasureId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Store.Model.Store.ReceiptDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("ReceiptDocuments");
                });

            modelBuilder.Entity("Store.Model.Store.ReceiptResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MeasureId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReceiptDocumentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ReceiptDocumentId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ReceiptResources");
                });

            modelBuilder.Entity("Store.Model.Store.ShipmentDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Status>("State")
                        .HasColumnType("status");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ShipmentDocuments");
                });

            modelBuilder.Entity("Store.Model.Store.ShipmentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MeasureId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MeasureId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ShipmentResources");
                });

            modelBuilder.Entity("Store.Model.Store.Balance", b =>
                {
                    b.HasOne("Store.Model.Directory.UnitMeasure", "Measure")
                        .WithMany("Balances")
                        .HasForeignKey("MeasureId");

                    b.HasOne("Store.Model.Directory.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId");

                    b.Navigation("Measure");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Store.Model.Store.ReceiptResource", b =>
                {
                    b.HasOne("Store.Model.Directory.UnitMeasure", "Measure")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("MeasureId");

                    b.HasOne("Store.Model.Store.ReceiptDocument", "ReceiptDocument")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("ReceiptDocumentId");

                    b.HasOne("Store.Model.Directory.Resource", "Resource")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("ResourceId");

                    b.Navigation("Measure");

                    b.Navigation("ReceiptDocument");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Store.Model.Store.ShipmentDocument", b =>
                {
                    b.HasOne("Store.Model.Directory.Client", "Client")
                        .WithMany("Shipments")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Store.Model.Store.ShipmentResource", b =>
                {
                    b.HasOne("Store.Model.Directory.UnitMeasure", "Measure")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("MeasureId");

                    b.HasOne("Store.Model.Directory.Resource", "Resource")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("ResourceId");

                    b.Navigation("Measure");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Store.Model.Directory.Client", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Store.Model.Directory.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("ShipmentResources");
                });

            modelBuilder.Entity("Store.Model.Directory.UnitMeasure", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("ShipmentResources");
                });

            modelBuilder.Entity("Store.Model.Store.ReceiptDocument", b =>
                {
                    b.Navigation("ReceiptResources");
                });
#pragma warning restore 612, 618
        }
    }
}
